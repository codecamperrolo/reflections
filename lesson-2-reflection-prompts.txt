What happens when you initialize a repository? Why do you need to do it?

We get a hidden .git file. We do this in order to create a repository.

How is the staging area different from the working directory and the repository? 
What value do you think it offers?

Commits will be made from all the files present in the staging area. Files in the working directory won't be commited. In order to make a commit i need to add my files from the working directory into the staging area and then i can commit. Finally the repository will contain all the commits i've made so far.

How can you use the staging area to make sure you have one commit per logical
change?

By adding one file at a time. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

It would be helpful when we want to create a different version of the code, but we want to still keep the original version. Would help that we can easily more around different versions of the code by providing a meaningful name, instead of moving around with the commit ID's.

How do the diagrams help you visualize the branch structure?

Help us understand the hierarchy and therefore understand the reachability of git log

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result are all the changes introduced on both files. A diagram of all the commits and branches helps us visualize better how is the hierarchy.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
